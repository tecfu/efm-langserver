version: 2
log-level: 5
log-file: "/home/base/.vim/efm-langserver.log"
# Do not use top-level root-markers because they will override the rootMarkers in tools.
tools:
  black: &black
    checkInstalled: "which black"
    install: "pip install black"
    format-command: "black --fast -"
    format-stdin: true
    lint-command: "black --check --diff -"
    lint-stdin: true
    lint-ignore-exit-code: true
    lint-after-open: true

  # --- Original eslint_d configuration (pre-wrapper) ---
  # eslint_d: &eslint_d
  #   format-command: "eslint_d --fix-to-stdout --stdin --stdin-filename ${INPUT}"
  #   format-stdin: true
  #   lint-command: "eslint_d --f unix --stdin --stdin-filename=${INPUT}"
  #   lint-stdin: true
  #   lint-ignore-exit-code: true
  #   lint-after-open: true
  #   rootMarkers: [".git/", "package.json"]

  eslint_d: &eslint_d
    checkInstalled: "which eslint_d"
    install: "npm install -g eslint-d"
    lint-command: "$HOME/.config/efm-langserver/efm-langserver-linter-wrapper.sh --filenames='eslint.config.js,eslint.config.mjs,eslint.config.cjs,eslint.config.ts,eslint.config.mts,eslint.config.cts' --fallback-config=\"$HOME/.config/eslint/eslint.config.js\" --filename-arg-prefix='--stdin-filename=' --config-flag='-c' -- eslint_d --f unix --stdin --stdin-filename=${INPUT}"
    format-command: "$HOME/.config/efm-langserver/efm-langserver-linter-wrapper.sh --filenames='eslint.config.js,eslint.config.mjs,eslint.config.cjs,eslint.config.ts,eslint.config.mts,eslint.config.cts' --fallback-config=\"$HOME/.config/eslint/eslint.config.js\" --filename-arg-prefix='--stdin-filename=' --config-flag='-c' -- eslint_d --fix-to-stdout --stdin --stdin-filename=${INPUT}"
    lint-stdin: true
    format-stdin: true
    lint-ignore-exit-code: true
    lint-after-open: true
    rootMarkers: [".git/", "package.json"]

  # --- Original eslint configuration (pre-wrapper) ---
  # eslint: &eslint
  #   format-command: "eslint --format unix --fix-to-stdout --stdin --stdin-filename=${INPUT}"
  #   format-stdin: true
  #   lint-command: "eslint --format unix --stdin --stdin-filename=${INPUT}"
  #   lint-stdin: true
  #   lint-ignore-exit-code: true
  #   lint-after-open: true
  #   rootMarkers: [".git/", "package.json"]

  eslint: &eslint
    checkInstalled: "which eslint"
    install: "npm install -g eslint"
    lint-command: "$HOME/.config/efm-langserver/efm-langserver-linter-wrapper.sh --filenames='eslint.config.js,eslint.config.mjs,eslint.config.cjs,eslint.config.ts,eslint.config.mts,eslint.config.cts' --fallback-config=\"$HOME/.config/eslint/eslint.config.js\" --filename-arg-prefix='--stdin-filename=' --config-flag='-c' -- eslint --format unix --stdin --stdin-filename=${INPUT}"
    format-command: "$HOME/.config/efm-langserver/efm-langserver-linter-wrapper.sh --filenames='eslint.config.js,eslint.config.mjs,eslint.config.cjs,eslint.config.ts,eslint.config.mts,eslint.config.cts' --fallback-config=\"$HOME/.config/eslint/eslint.config.js\" --filename-arg-prefix='--stdin-filename=' --config-flag='-c' -- eslint --format unix --fix-to-stdout --stdin --stdin-filename=${INPUT}"
    lint-stdin: true
    format-stdin: true
    lint-ignore-exit-code: true
    lint-after-open: true
    rootMarkers: [".git/", "package.json"]

  gofmt: &gofmt
    checkInstalled: "which gofmt"
    install: "go install golang.org/x/tools/cmd/gofmt@latest"
    format-command: "gofmt"
    format-stdin: true

  goimports: &goimports
    checkInstalled: "which goimports"
    install: "go install golang.org/x/tools/cmd/goimports@latest"
    format-command: "goimports"
    format-stdin: true

  golangci_lint: &golangci_lint
    checkInstalled: "which golangci-lint"
    install: "go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest"
    lint-command: "golangci-lint run --out-format=line-number"
    lint-stdin: false
    lint-formats:
      - "%f:%l:%c: %m"

  # --- Original md_markdownlint configuration (pre-wrapper) ---
  # md_markdownlint: &md_markdownlint
  #   lint-command: '/home/base/.volta/bin/markdownlint ${INPUT}'
  #   lint-stdin: false
  #   lint-formats:
  #     - '%f:%l %m'
  #     - '%f:%l:%c %m'
  #     - '%f: %l: %m'

  md_markdownlint: &md_markdownlint
    checkInstalled: "which markdownlint"
    install: "npm install -g markdownlint-cli"
    # The LINT command still uses the wrapper for intelligent config detection.
    lint-command: "$HOME/.config/efm-langserver/efm-langserver-linter-wrapper.sh --filenames='.markdownlint.json,.markdownlint.yaml,.markdownlint.yml,.markdownlintrc' --fallback-config=\"$HOME/.config/markdownlint/config.json\" --filename-arg-prefix='' --config-flag='--config' -- /home/base/.volta/bin/markdownlint ${INPUT}"
    lint-stdin: false
    lint-after-open: true
    lint-formats:
      - '%f:%l %m'
      - '%f:%l:%c %m'
    # FORMAT command uses our forked efm-langserver, native in-place feature.
    format-command: "markdownlint --fix ${INPUT}"
    format-inplace: true # This activates the patched Go logic.
    format-stdin: false  # Must be false for ${INPUT} to work.
    rootMarkers:
      - .git/
      - package.json

  basedpyright_wrapped: &basedpyright_wrapped
    checkInstalled: "which basedpyright"
    install: "pip install basedpyright"
    lint-command: "~/.vim/efm-stdin-file-wrapper.sh basedpyright --outputjson $tempfile"
    lint-stdin: true
    lint-jq: ".generalDiagnostics[] | {file, message, severity, range, rule}"
    #passthrough:
    #  command: "pyright-langserver"
    #  args: ["--stdio"]

  # mypy_lint is used for static type checking in Python code with mypy.
  # Use for type checking only
  # Does not support linting stdin (need to save file first)
  mypy_lint: &mypy_lint
    checkInstalled: "which mypy"
    install: "pip install mypy"
    lint-command: "mypy --no-error-summary --show-column-numbers --ignore-missing-imports --disallow-untyped-defs --disallow-incomplete-defs ${INPUT}"
    lint-stdin: true
    lint-formats:
      - "%f:%l:%c: %trror: %m"
      - "%f:%l:%c: %tarning: %m"
      - "%f:%l:%c: %tote: %m"
    lint-after-open: true

  # flake8_lint is used for linting Python code with flake8.
  flake8_lint: &flake8_lint
    checkInstalled: "which flake8"
    install: "pip install flake8"
    lint-command: "flake8 --stdin-display-name ${INPUT} -"
    lint-stdin: true
    lint-formats:
      - "%f:%l:%c: %m"
    lint-after-open: true
    root-markers:
      - setup.cfg
      - pyproject.toml
      - tox.ini
      - .flake8
      - .git/

  pyright: &pyright
    checkInstalled: "which pyright"
    install: "npm install -g pyright"
    lint-command: "~/.vim/efm-stdin-file-wrapper.sh pyright --outputjson $tempfile"
    lint-stdin: false
    lint-ignore-exit-code: false
    lint-after-open: true
    lint-jq: ".generalDiagnostics[] | {file, message, severity, range, rule}"
    rootMarkers:
      - .git/
      - requirements.txt

  ruff: &ruff
    checkInstalled: "which ruff"
    install: "pip install ruff"
    lint-command: "ruff check --force-exclude --output-format=text ${INPUT}"
    lint-stdin: false
    lint-formats:
      - "%f:%l:%c: %m"
    lint-ignore-exit-code: true
    format-command: "ruff format -"
    format-stdin: true

  sql_language_server: &sql_language_server
    checkInstalled: "which sql-language-server"
    install: "npm install -g sql-language-server"
    command: sql-language-server
    args: ["up", "--method", "stdio"]
    filetypes: [sql]
    rootMarkers: [".git/", "package.json"]
    settings:
      sql:

  #sql-language-server-ksql:
  #  command: sql-language-server
  #  args: ["up", "--method", "stdio"]
  #  filetypes: [ksql]
  #  rootMarkers: [".git/", "package.json"]
  #  settings:
  #    sql:
  #      dialect: "kafka"

  sql_lint: &sql_lint
    checkInstalled: "which sql-lint"
    install: "npm install -g sql-lint"
    lint-command: "sql-lint --format unix --stdin --stdin-filename=${INPUT}"
    lint-stdin: true
    lint-ignore-exit-code: true
    lint-after-open: true

  shfmt: &shfmt
    checkInstalled: "which shfmt"
    install: "go install mvdan.cc/sh/v3/cmd/shfmt@latest"
    format-command: "shfmt -ci -s -bn"
    format-stdin: true

languages:
  go:
    - <<: *golangci_lint
    - <<: *gofmt
    - <<: *goimports
  javascript:
    - <<: *eslint_d
  json:
    - <<: *eslint_d
  jsonc:
    - <<: *eslint_d
  markdown:
    - <<: *md_markdownlint # Lints the Markdown structure and prose
    - <<: *eslint_d        # Lints code blocks (js/ts) within the Markdown
  python:
    - <<: *basedpyright_wrapped
  sh:
    - <<: *shfmt
  sql:
    - <<: *sql_language_server
    - <<: *sql_lint
  typescript:
    - <<: *eslint_d
